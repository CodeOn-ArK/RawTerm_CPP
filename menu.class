#include "time.cpp"
class switch_class;
class colour;

using namespace std;

/********************-CLASS-**********************/

class menu {
 private:
 protected:
 public:
  void display_menu() {}
};
/******************-FUNCTIONS-*********************/

/*********************-END-************************/

/********************-CLASS-**********************/

class colour : public menu
{
 private:
 protected:
 public:
  void change_clor_scheme(int i) {
    switch (i) {
      case 0:
        init_pair(1, COLOR_YELLOW, COLOR_BLACK);
        break;

      case 1:
        init_pair(1, COLOR_BLUE, COLOR_BLACK);
        break;

      case 2:
        init_pair(1, COLOR_CYAN, COLOR_BLACK);
        break;

      case 3:
        init_pair(1, COLOR_RED, COLOR_BLACK);
        break;
        
      case 4:
        init_pair(1, COLOR_GREEN, COLOR_BLACK);
        break;

      case 5:
        init_pair(1, COLOR_MAGENTA, COLOR_BLACK);
        break;
    }

  }
    void menu_call(void);
};
/******************-FUNCTIONS-*********************/

/*********************-END-************************/

void menu_call(void);
/********************-CLASS-**********************/

class device : public menu {
 private:

 protected:
 public:
  /*
  switch_dev need to be called from the menu upon any given choice  ****TODO****
  */
 ofstream outy;
  void switch_dev(int i) {
    switch (i) {
      case 0:
        //if (outf) outf.close();
        outy.open("/dev/ttyUSB0", ios::binary | ios::out);
        break;
        

      case 1:
        //if (outf) outf.close();
        outy.open("/dev/ttyUSB1", ios::binary | ios::out);
        break;

      case 2:
        //if (outf) outf.close();
        outy.open("/dev/ttyACM0", ios::binary | ios::out);
        break;

      case 3:
        //if (outf) outf.close();
        outy.open("/dev/ttyACM1", ios::binary | ios::out);
        break;
    }
  }

  // TO be called from menu_call           ****TODO*****
  void display_menu() { cout << "device called display_menu"; }

  void write(char *str) {
    outy << str << endl;
    cout << "hello";
  }
};

/******************-FUNCTIONS-*********************/

/*********************-END-************************/

/********************-CLASS-**********************/

class ip_file : public device {
 private:
 protected:
 public:
  void file_input();

  void display_menu() { cout << "device called display_menu"; }
};
/******************-FUNCTIONS-*********************/
void ip_file::file_input() {
  char str[30];

  while (1) {
    cin.getline(str, 30, '\n');

    if(time_printing.get_enable_status) print_time();

    cout << " affected";
    if (strcmp(str, "__MENU"))
      write(str);
    else
      menu_call();
  }
}
/*********************-END-************************/

/********************-CLASS-**********************/

class time_printing
{
private:
int time_enable;
int hold_time;

protected:

public:

void enable_time()
{
    time_enable = 1;   
}

void disable_time()
{
    time_enable = 0;
}

friend void hold_time()
friend int return_hold_time()

int get_enable_status()
{
    return time_enable;
}

};
/******************-FUNCTIONS-*********************/

void hold_time()
{
    hold_time = print_time();
}

int return_hold_time()
{
    return hold_time;
}
/*********************-END-************************/
/********************-CLASS-**********************/

class log_class
{
private:
ofstream log_file;
int log_generation_status;

protected:

public:
void enable_log()
{
    log_generation_status = 1;
}

void disable_log()
{
    log_generation_status = 0;
}

void generate_log()
{
    if(get_enable_status)
    log_file << str << endl;  
}

};
/******************-FUNCTIONS-*********************/

/*********************-END-************************/
/********************-CLASS-**********************/

class baud
{
private:

protected:

public:

};
/******************-FUNCTIONS-*********************/

/*********************-END-************************/


/********************-CLASS-**********************/

class newline
{
private:

protected:

public:

}
;

/******************-FUNCTIONS-*********************/

/*********************-END-************************/



